TWO SUM 
class Solution {
public:
    std::vector<int> twoSum(std::vector<int>& nums, int target) {
        std::unordered_map<int, int> num_indices;

        for (int i = 0; i < nums.size(); ++i) {
            int num = nums[i];
            int complement = target - num;

            if (num_indices.find(complement) != num_indices.end()) {
                return {num_indices[complement], i};
            }

            num_indices[num] = i;
        }

        return {}; 
    }
};

MIN STACK
class MinStack {
private:
    vector<vector<int>> st;

public:
    MinStack() {
        
    }
    
    void push(int val) {
        int min_val = getMin();
        if (st.empty() || min_val > val) {
            min_val = val;
        }
        st.push_back({val, min_val});        
    }
    
    void pop() {
        st.pop_back();
    }
    
    int top() {
        return st.empty() ? -1 : st.back()[0];
    }
    
    int getMin() {
        return st.empty() ? -1 : st.back()[1]; 
    }
};
